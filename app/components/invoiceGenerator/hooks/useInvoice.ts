import { useState, useCallback } from 'react';
import { Invoice, Company } from '../types/invoice';
import { saveInvoice as saveInvoiceApi } from '../../course-player-dashboard/services/api';

export const useInvoice = () => {
  const [currentInvoice, setCurrentInvoice] = useState<Invoice>(() => {
    const today = new Date();
    const dueDate = new Date();
    dueDate.setDate(today.getDate() + 30);

    return {
      id: Date.now().toString(),
      invoiceNumber: '', // Will be generated by backend
      date: today.toISOString().split('T')[0],
      dueDate: dueDate.toISOString().split('T')[0],
      user: {
        id: '',
        name: '',
        firstName: '',
        lastName: '',
        email: '',
        phone: '',
        address: '',
      },
      items: [],
      subtotal: 0,
      taxRate: 8.5,
      taxAmount: 0,
      discount: 0,
      total: 0,
      status: 'draft',
      notes: '',
    };
  });

  const [company, setCompany] = useState<Company>(() => {
    return {
      name: 'Your Company Name',
      address: '123 Company St, City, State, 12345',
      phone: '555-123-4567',
      email: 'info@yourcompany.com',
      website: 'www.yourcompany.com',
    };
  });

  const [stripeInvoiceUrl, setStripeInvoiceUrl] = useState<string | null>(null);

  const saveInvoice = useCallback(async () => {
    try {
      const { invoice, stripeInvoiceUrl } = await saveInvoiceApi(currentInvoice);
      
      setCurrentInvoice(invoice);
      setStripeInvoiceUrl(stripeInvoiceUrl);

      alert('Invoice saved successfully!');
    } catch (error) {
      console.error('Error saving invoice:', error);
      alert('Failed to save invoice.');
    }
  }, [currentInvoice]);

  const saveCompany = useCallback((newCompany: Company) => {
    setCompany(newCompany);
  }, []);

  const createNewInvoice = useCallback(() => {
    const today = new Date();
    const dueDate = new Date();
    dueDate.setDate(today.getDate() + 30);

    setCurrentInvoice({
      id: Date.now().toString(),
      invoiceNumber: '',
      date: today.toISOString().split('T')[0],
      dueDate: dueDate.toISOString().split('T')[0],
      user: {
        id: '',
        name: '',
        firstName: '',
        lastName: '',
        email: '',
        phone: '',
        address: '',
      },
      items: [],
      subtotal: 0,
      taxRate: 8.5,
      taxAmount: 0,
      discount: 0,
      total: 0,
      status: 'draft',
      notes: '',
    });
    setStripeInvoiceUrl(null); // Reset the URL for the new invoice
  }, []);

  

  

  const printInvoice = useCallback(() => {
    window.print();
  }, []);

  return {
    currentInvoice,
    setCurrentInvoice,
    company,
    saveInvoice,
    saveCompany,
    createNewInvoice,
    printInvoice,
    stripeInvoiceUrl,
  };
};
